"""PyHiero v0.1

PyHiero is a parser for bitmap fonts generated by the Hiero tool.
It is implemented in pure python and supports rendering to PyGame surfaces, although implementing 
other rendering systems should be easy to do. Here are some demo alpha-blended texts:
 """

from pyhiero.pygamefont import PyGameHieroFont
import pygame, sys
from pygame.locals import *
import math

# init pygame
pygame.init()
screen = pygame.display.set_mode((800, 300))
pygame.display.set_caption('Hello World!')

# striped background to show off alpha blending
background = pygame.image.load("demo_bg.png")

# load some fonts
fonts = {
	 "cabinsketch": PyGameHieroFont("examples/CabinSketch/CabinSketch.fnt")
	,"ranchers": PyGameHieroFont("examples/Ranchers/Ranchers.fnt")
	,"engagement": PyGameHieroFont("examples/Engagement/Engagement.fnt")
}

fnt_header = PyGameHieroFont("examples/Electrolize/Electrolize40.fnt")
fnt_body = PyGameHieroFont("examples/Electrolize/Electrolize16.fnt")



# create some demo text
blah = "Quick zephyrs blow, vexing daft Jim."

colors = {
	 "cabinsketch": (128,0,0)
	,"ranchers": (0,128,0, 128) # alpha! 
	,"engagement": (0,0,128)
}

samples = { fontname: fnt.render(blah, color=colors[fontname]) for fontname, fnt in fonts.items() }

# split doctext by lines
docsplit = __doc__.split("\n")

# first line of doctext is header
headertext = fnt_header.render(docsplit[0], color=(0,0,0))

# other lines are body text
bodytext = [ fnt_body.render(line, color=(0,0,0)) for line in docsplit[1:]]
bodytext = [ line for line in bodytext if line ]


r = 5

while True: 

	# listen for window close
	for event in pygame.event.get():
		if event.type == QUIT:
			pygame.quit()
			sys.exit()


	screen.fill((255,255,255))


	# draw a moving background image - it would be more efficient to draw the tiled image once and then move it, but hey :D
	time = pygame.time.get_ticks()
	phi = (time / 1000.0)
	for x in range(0, screen.get_width() + 2*r, background.get_width()):
		for y in range(0, screen.get_height() + 2*r, background.get_height()):
			screen.blit(background, (x - r + math.cos(phi) * r, y - r + math.sin(phi) * r))

	# draw the header, the body text and then the samples
	y = 20 
	x = 20 
	for line in [headertext] + bodytext + samples.values():
		screen.blit(line, (x, y))
		y += line.get_height()

	pygame.display.update()

